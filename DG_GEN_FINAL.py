#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Feb 09, 2019 11:40:06 PM IST  platform: Windows NT

import sys
import random
import time
from faker import Factory
import names
import gender_guesser.detector as gender
fake = Factory.create()
from time import gmtime, strftime
import datetime
from tkinter import messagebox
old_stdout = sys.stdout

gender_detector = gender.Detector()

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import dg_gen_final_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    dg_gen_final_support.set_Tk_var()
    top = Toplevel1 (root)
    dg_gen_final_support.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    dg_gen_final_support.set_Tk_var()
    top = Toplevel1 (w)
    dg_gen_final_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
         
        self.var=tk.IntVar() # initializing the choice for each mouse click
        self.var2=tk.IntVar()
        self.var1_1=tk.IntVar()
        self.var1_2=tk.IntVar()
        self.var1_3=tk.IntVar()
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 
        font10 = "-family Elephant -size 11 -weight normal -slant "  \
            "italic -underline 0 -overstrike 0"
        font11 = "-family Calibri -size 12 -weight bold -slant roman "  \
            "-underline 0 -overstrike 0"
        font9 = "-family {Times New Roman} -size 40 -weight bold "  \
            "-slant roman -underline 0 -overstrike 0"
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("817x584+235+88")
        top.title("Data Genie")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
        top.iconbitmap('datagenie.ico')

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.184, rely=0.051, height=48, width=564)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(font=font9)
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Data Genie - Generator''')
        

        self.Entry1 = tk.Entry(top)
        self.Entry1.place(relx=0.404, rely=0.205,height=20, relwidth=0.36)
        self.Entry1.configure(background="white")
        self.Entry1.configure(disabledforeground="#a3a3a3")
        self.Entry1.configure(font="TkFixedFont")
        self.Entry1.configure(foreground="#000000")
        self.Entry1.configure(highlightbackground="#d9d9d9")
        self.Entry1.configure(highlightcolor="black")
        self.Entry1.configure(insertbackground="black")
        self.Entry1.configure(selectbackground="#c4c4c4")
        self.Entry1.configure(selectforeground="black")

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.171, rely=0.205, height=25, width=185)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font=font11)
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Enter the number of data:''')

        self.Button1 = tk.Button(top)
        self.Button1.place(relx=0.049, rely=0.283, height=22, width=103)
        self.Button1.configure(activebackground="#ececec")
        self.Button1.configure(activeforeground="#000000")
        self.Button1.configure(background="#d9d9d9")
        self.Button1.configure(disabledforeground="#a3a3a3")
        self.Button1.configure(foreground="#000000")
        self.Button1.configure(highlightbackground="#d9d9d9")
        self.Button1.configure(highlightcolor="black")
        self.Button1.configure(pady="0")
        self.Button1.configure(text='''Address''')

        self.Button1_1 = tk.Button(top)
        self.Button1_1.place(relx=0.049, rely=0.342, height=24, width=103)
        self.Button1_1.configure(activebackground="#ececec")
        self.Button1_1.configure(activeforeground="#000000")
        self.Button1_1.configure(background="#d9d9d9")
        self.Button1_1.configure(disabledforeground="#a3a3a3")
        self.Button1_1.configure(foreground="#000000")
        self.Button1_1.configure(highlightbackground="#d9d9d9")
        self.Button1_1.configure(highlightcolor="black")
        self.Button1_1.configure(pady="0")
        self.Button1_1.configure(text='''Phone number''')
        self.Button1_1.configure(command=self.phone_number)
        

        self.Button1_2 = tk.Button(top)
        self.Button1_2.place(relx=0.049, rely=0.402, height=24, width=103)
        self.Button1_2.configure(activebackground="#ececec")
        self.Button1_2.configure(activeforeground="#000000")
        self.Button1_2.configure(background="#d9d9d9")
        self.Button1_2.configure(disabledforeground="#a3a3a3")
        self.Button1_2.configure(foreground="#000000")
        self.Button1_2.configure(highlightbackground="#d9d9d9")
        self.Button1_2.configure(highlightcolor="black")
        self.Button1_2.configure(pady="0")
        self.Button1_2.configure(text='''Company Names''')
        self.Button1_2.configure(command=self.company_name)

        self.Button1_3 = tk.Button(top)
        self.Button1_3.place(relx=0.049, rely=0.471, height=24, width=103)
        self.Button1_3.configure(activebackground="#ececec")
        self.Button1_3.configure(activeforeground="#000000")
        self.Button1_3.configure(background="#d9d9d9")
        self.Button1_3.configure(disabledforeground="#a3a3a3")
        self.Button1_3.configure(foreground="#000000")
        self.Button1_3.configure(highlightbackground="#d9d9d9")
        self.Button1_3.configure(highlightcolor="black")
        self.Button1_3.configure(pady="0")
        self.Button1_3.configure(text='''Email ID''')

        self.Button1_4 = tk.Button(top)
        self.Button1_4.place(relx=0.049, rely=0.531, height=24, width=103)
        self.Button1_4.configure(activebackground="#ececec")
        self.Button1_4.configure(activeforeground="#000000")
        self.Button1_4.configure(background="#d9d9d9")
        self.Button1_4.configure(disabledforeground="#a3a3a3")
        self.Button1_4.configure(foreground="#000000")
        self.Button1_4.configure(highlightbackground="#d9d9d9")
        self.Button1_4.configure(highlightcolor="black")
        self.Button1_4.configure(pady="0")
        self.Button1_4.configure(text='''Job Title''')
        self.Button1_4.configure(command=self.job_title)


        self.Button1_5 = tk.Button(top)
        self.Button1_5.place(relx=0.049, rely=0.599, height=24, width=103)
        self.Button1_5.configure(activebackground="#ececec")
        self.Button1_5.configure(activeforeground="#000000")
        self.Button1_5.configure(background="#d9d9d9")
        self.Button1_5.configure(disabledforeground="#a3a3a3")
        self.Button1_5.configure(foreground="#000000")
        self.Button1_5.configure(highlightbackground="#d9d9d9")
        self.Button1_5.configure(highlightcolor="black")
        self.Button1_5.configure(pady="0")
        self.Button1_5.configure(text='''Name''')

        self.Button1_6 = tk.Button(top)
        self.Button1_6.place(relx=0.049, rely=0.668, height=24, width=103)
        self.Button1_6.configure(activebackground="#ececec")
        self.Button1_6.configure(activeforeground="#000000")
        self.Button1_6.configure(background="#d9d9d9")
        self.Button1_6.configure(disabledforeground="#a3a3a3")
        self.Button1_6.configure(foreground="#000000")
        self.Button1_6.configure(highlightbackground="#d9d9d9")
        self.Button1_6.configure(highlightcolor="black")
        self.Button1_6.configure(pady="0")
        self.Button1_6.configure(text='''Random Number''')
        self.Button1_6.config(command=self.random_number)

        self.Radiobutton1 = tk.Radiobutton(top)
        self.Radiobutton1.place(relx=0.184, rely=0.283, relheight=0.043
                , relwidth=0.124)
        self.Radiobutton1.configure(activebackground="#ececec")
        self.Radiobutton1.configure(activeforeground="#000000")
        self.Radiobutton1.configure(background="#d9d9d9")
        self.Radiobutton1.configure(disabledforeground="#a3a3a3")
        self.Radiobutton1.configure(foreground="#000000")
        self.Radiobutton1.configure(highlightbackground="#d9d9d9")
        self.Radiobutton1.configure(highlightcolor="black")
        self.Radiobutton1.configure(justify='left')
        self.Radiobutton1.configure(text='''Address line 1''')
        self.Radiobutton1.configure(value="3",variable=self.var)

        self.Radiobutton1_6 = tk.Radiobutton(top)
        self.Radiobutton1_6.place(relx=0.318, rely=0.283, relheight=0.043
                , relwidth=0.124)
        self.Radiobutton1_6.configure(activebackground="#ececec")
        self.Radiobutton1_6.configure(activeforeground="#000000")
        self.Radiobutton1_6.configure(background="#d9d9d9")
        self.Radiobutton1_6.configure(disabledforeground="#a3a3a3")
        self.Radiobutton1_6.configure(foreground="#000000")
        self.Radiobutton1_6.configure(highlightbackground="#d9d9d9")
        self.Radiobutton1_6.configure(highlightcolor="black")
        self.Radiobutton1_6.configure(justify='left')
        self.Radiobutton1_6.configure(text='''Address line 2''')
        self.Radiobutton1_6.configure(value="4",variable=self.var)



        self.Radiobutton1_7 = tk.Radiobutton(top)
        self.Radiobutton1_7.place(relx=0.453, rely=0.283, relheight=0.043
                , relwidth=0.124)
        self.Radiobutton1_7.configure(activebackground="#ececec")
        self.Radiobutton1_7.configure(activeforeground="#000000")
        self.Radiobutton1_7.configure(background="#d9d9d9")
        self.Radiobutton1_7.configure(disabledforeground="#a3a3a3")
        self.Radiobutton1_7.configure(foreground="#000000")
        self.Radiobutton1_7.configure(highlightbackground="#d9d9d9")
        self.Radiobutton1_7.configure(highlightcolor="black")
        self.Radiobutton1_7.configure(justify='left')
        self.Radiobutton1_7.configure(text='''Address line 3''')
        self.Radiobutton1_7.configure(value="5",variable=self.var)

        self.Radiobutton1_8 = tk.Radiobutton(top)
        self.Radiobutton1_8.place(relx=0.594, rely=0.283, relheight=0.043
                , relwidth=0.075)
        self.Radiobutton1_8.configure(activebackground="#ececec")
        self.Radiobutton1_8.configure(activeforeground="#000000")
        self.Radiobutton1_8.configure(background="#d9d9d9")
        self.Radiobutton1_8.configure(disabledforeground="#a3a3a3")
        self.Radiobutton1_8.configure(foreground="#000000")
        self.Radiobutton1_8.configure(highlightbackground="#d9d9d9")
        self.Radiobutton1_8.configure(highlightcolor="black")
        self.Radiobutton1_8.configure(justify='left')
        self.Radiobutton1_8.configure(text='''City''')
        self.Radiobutton1_8.configure(value="6",variable=self.var)

        self.TSeparator1 = ttk.Separator(top)
        self.TSeparator1.place(relx=-0.012, rely=0.83, relwidth=1.016)

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.441, rely=0.813, height=22, width=139)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font=font10)
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Output Format''')

        self.Radiobutton1_9 = tk.Radiobutton(top)
        self.Radiobutton1_9.place(relx=0.0, rely=0.865, relheight=0.043
                , relwidth=0.124)
        self.Radiobutton1_9.configure(activebackground="#ececec")
        self.Radiobutton1_9.configure(activeforeground="#000000")
        self.Radiobutton1_9.configure(background="#d9d9d9")
        self.Radiobutton1_9.configure(disabledforeground="#a3a3a3")
        self.Radiobutton1_9.configure(foreground="#000000")
        self.Radiobutton1_9.configure(highlightbackground="#d9d9d9")
        self.Radiobutton1_9.configure(highlightcolor="black")
        self.Radiobutton1_9.configure(justify='left')
        self.Radiobutton1_9.configure(text='''.TXT''')
        self.Radiobutton1_9.configure(value="13",variable=self.var2)

        self.Radiobutton1_10 = tk.Radiobutton(top)
        self.Radiobutton1_10.place(relx=0.453, rely=0.865, relheight=0.043
                , relwidth=0.124)
        self.Radiobutton1_10.configure(activebackground="#ececec")
        self.Radiobutton1_10.configure(activeforeground="#000000")
        self.Radiobutton1_10.configure(background="#d9d9d9")
        self.Radiobutton1_10.configure(disabledforeground="#a3a3a3")
        self.Radiobutton1_10.configure(foreground="#000000")
        self.Radiobutton1_10.configure(highlightbackground="#d9d9d9")
        self.Radiobutton1_10.configure(highlightcolor="black")
        self.Radiobutton1_10.configure(justify='left')
        self.Radiobutton1_10.configure(text='''.CSV''')
        self.Radiobutton1_10.configure(value="14",variable=self.var2)

        self.Radiobutton1_11 = tk.Radiobutton(top)
        self.Radiobutton1_11.place(relx=0.869, rely=0.873, relheight=0.043
                , relwidth=0.124)
        self.Radiobutton1_11.configure(activebackground="#ececec")
        self.Radiobutton1_11.configure(activeforeground="#000000")
        self.Radiobutton1_11.configure(background="#d9d9d9")
        self.Radiobutton1_11.configure(disabledforeground="#a3a3a3")
        self.Radiobutton1_11.configure(foreground="#000000")
        self.Radiobutton1_11.configure(highlightbackground="#d9d9d9")
        self.Radiobutton1_11.configure(highlightcolor="black")
        self.Radiobutton1_11.configure(justify='left')
        self.Radiobutton1_11.configure(text='''.DOC''')
        self.Radiobutton1_11.configure(value="15",variable=self.var2)

        self.Button1_7 = tk.Button(top)
        self.Button1_7.place(relx=0.459, rely=0.942, height=26, width=103)
        self.Button1_7.configure(activebackground="#ececec")
        self.Button1_7.configure(activeforeground="#000000")
        self.Button1_7.configure(background="#d9d9d9")
        self.Button1_7.configure(disabledforeground="#a3a3a3")
        self.Button1_7.configure(foreground="#000000")
        self.Button1_7.configure(highlightbackground="#d9d9d9")
        self.Button1_7.configure(highlightcolor="black")
        self.Button1_7.configure(pady="0")
        self.Button1_7.configure(text='''Submit''')
        self.Button1_7.configure(command=self.submit)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Radiobutton1_1 = tk.Radiobutton(top)
        self.Radiobutton1_1.place(relx=0.692, rely=0.283, relheight=0.043
                , relwidth=0.099)
        self.Radiobutton1_1.configure(activebackground="#ececec")
        self.Radiobutton1_1.configure(activeforeground="#000000")
        self.Radiobutton1_1.configure(background="#d9d9d9")
        self.Radiobutton1_1.configure(disabledforeground="#a3a3a3")
        self.Radiobutton1_1.configure(foreground="#000000")
        self.Radiobutton1_1.configure(highlightbackground="#d9d9d9")
        self.Radiobutton1_1.configure(highlightcolor="black")
        self.Radiobutton1_1.configure(justify='left')
        self.Radiobutton1_1.configure(text='''Postcode''')
        self.Radiobutton1_1.configure(value="7",variable=self.var)
        

        self.Radiobutton1_2 = tk.Radiobutton(top)
        self.Radiobutton1_2.place(relx=0.814, rely=0.283, relheight=0.043
                , relwidth=0.148)
        self.Radiobutton1_2.configure(activebackground="#ececec")
        self.Radiobutton1_2.configure(activeforeground="#000000")
        self.Radiobutton1_2.configure(background="#d9d9d9")
        self.Radiobutton1_2.configure(disabledforeground="#a3a3a3")
        self.Radiobutton1_2.configure(foreground="#000000")
        self.Radiobutton1_2.configure(highlightbackground="#d9d9d9")
        self.Radiobutton1_2.configure(highlightcolor="black")
        self.Radiobutton1_2.configure(justify='left')
        self.Radiobutton1_2.configure(text='''Full UK Address''')
        self.Radiobutton1_2.configure(value="8",variable=self.var)

        self.Radiobutton1_3 = tk.Radiobutton(top)
        self.Radiobutton1_3.place(relx=0.184, rely=0.471, relheight=0.043
                , relwidth=0.197)
        self.Radiobutton1_3.configure(activebackground="#ececec")
        self.Radiobutton1_3.configure(activeforeground="#000000")
        self.Radiobutton1_3.configure(background="#d9d9d9")
        self.Radiobutton1_3.configure(disabledforeground="#a3a3a3")
        self.Radiobutton1_3.configure(foreground="#000000")
        self.Radiobutton1_3.configure(highlightbackground="#d9d9d9")
        self.Radiobutton1_3.configure(highlightcolor="black")
        self.Radiobutton1_3.configure(justify='left')
        self.Radiobutton1_3.configure(text='''Username+Company''')
        self.Radiobutton1_3.configure(value="9",variable=self.var)

        self.Radiobutton1_12 = tk.Radiobutton(top)
        self.Radiobutton1_12.place(relx=0.404, rely=0.471, relheight=0.043
                , relwidth=0.173)
        self.Radiobutton1_12.configure(activebackground="#ececec")
        self.Radiobutton1_12.configure(activeforeground="#000000")
        self.Radiobutton1_12.configure(background="#d9d9d9")
        self.Radiobutton1_12.configure(disabledforeground="#a3a3a3")
        self.Radiobutton1_12.configure(foreground="#000000")
        self.Radiobutton1_12.configure(highlightbackground="#d9d9d9")
        self.Radiobutton1_12.configure(highlightcolor="black")
        self.Radiobutton1_12.configure(justify='left')
        self.Radiobutton1_12.configure(text='''Username+Personal''')
        self.Radiobutton1_12.configure(value="10",variable=self.var)

        self.Checkbutton1 = tk.Checkbutton(top)
        self.Checkbutton1.place(relx=0.184, rely=0.591, relheight=0.043
                , relwidth=0.1)
        self.Checkbutton1.configure(activebackground="#ececec")
        self.Checkbutton1.configure(activeforeground="#000000")
        self.Checkbutton1.configure(background="#d9d9d9")
        self.Checkbutton1.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1.configure(foreground="#000000")
        self.Checkbutton1.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1.configure(highlightcolor="black")
        self.Checkbutton1.configure(justify='left')
        self.Checkbutton1.configure(text='''FirstName''')
        self.Checkbutton1.configure(onvalue = 1, offvalue = 0,variable=self.var1_1)

        self.Checkbutton1_13 = tk.Checkbutton(top)
        self.Checkbutton1_13.place(relx=0.318, rely=0.591, relheight=0.043
                , relwidth=0.125)
        self.Checkbutton1_13.configure(activebackground="#ececec")
        self.Checkbutton1_13.configure(activeforeground="#000000")
        self.Checkbutton1_13.configure(background="#d9d9d9")
        self.Checkbutton1_13.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1_13.configure(foreground="#000000")
        self.Checkbutton1_13.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1_13.configure(highlightcolor="black")
        self.Checkbutton1_13.configure(justify='left')
        self.Checkbutton1_13.configure(text='''MiddleName''')
        self.Checkbutton1_13.configure(onvalue = 1, offvalue = 0,variable=self.var1_2)

        self.Checkbutton1_14 = tk.Checkbutton(top)
        self.Checkbutton1_14.place(relx=0.447, rely=0.591, relheight=0.043
                , relwidth=0.125)
        self.Checkbutton1_14.configure(activebackground="#ececec")
        self.Checkbutton1_14.configure(activeforeground="#000000")
        self.Checkbutton1_14.configure(background="#d9d9d9")
        self.Checkbutton1_14.configure(disabledforeground="#a3a3a3")
        self.Checkbutton1_14.configure(foreground="#000000")
        self.Checkbutton1_14.configure(highlightbackground="#d9d9d9")
        self.Checkbutton1_14.configure(highlightcolor="black")
        self.Checkbutton1_14.configure(justify='left')
        self.Checkbutton1_14.configure(text='''LastName''')
        self.Checkbutton1_14.configure(onvalue = 1, offvalue = 0, variable=self.var1_3)

        self.Entry2 = tk.Entry(top)
        self.Entry2.place(relx=0.282, rely=0.668,height=20, relwidth=0.042)
        self.Entry2.configure(background="white")
        self.Entry2.configure(disabledforeground="#a3a3a3")
        self.Entry2.configure(font="TkFixedFont")
        self.Entry2.configure(foreground="#000000")
        self.Entry2.configure(highlightbackground="#d9d9d9")
        self.Entry2.configure(highlightcolor="black")
        self.Entry2.configure(insertbackground="black")
        self.Entry2.configure(selectbackground="#c4c4c4")
        self.Entry2.configure(selectforeground="black")
    

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.214, rely=0.668, height=21, width=46)
        self.Label4.configure(activebackground="#f9f9f9")
        self.Label4.configure(activeforeground="black")
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(highlightbackground="#d9d9d9")
        self.Label4.configure(highlightcolor="black")
        self.Label4.configure(text='''Length:''')

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.49, rely=0.668, height=21, width=414)
        self.Label5.configure(activebackground="#f9f9f9")
        self.Label5.configure(activeforeground="black")
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(highlightbackground="#d9d9d9")
        self.Label5.configure(highlightcolor="black")
        self.Label5.configure(justify='left')
        #self.Label5.configure(text='''Data generation Progress''')

        self.Radiobutton1_4 = tk.Radiobutton(top)
        self.Radiobutton1_4.place(relx=0.575, rely=0.471, relheight=0.043
                , relwidth=0.173)
        self.Radiobutton1_4.configure(activebackground="#ececec")
        self.Radiobutton1_4.configure(activeforeground="#000000")
        self.Radiobutton1_4.configure(background="#d9d9d9")
        self.Radiobutton1_4.configure(disabledforeground="#a3a3a3")
        self.Radiobutton1_4.configure(foreground="#000000")
        self.Radiobutton1_4.configure(highlightbackground="#d9d9d9")
        self.Radiobutton1_4.configure(highlightcolor="black")
        self.Radiobutton1_4.configure(justify='left')
        self.Radiobutton1_4.configure(text='''Domains Alone''')
        self.Radiobutton1_4.configure(value="11",variable=self.var)

        self.Radiobutton1_13 = tk.Radiobutton(top)
        self.Radiobutton1_13.place(relx=0.747, rely=0.471, relheight=0.043
                , relwidth=0.173)
        self.Radiobutton1_13.configure(activebackground="#ececec")
        self.Radiobutton1_13.configure(activeforeground="#000000")
        self.Radiobutton1_13.configure(background="#d9d9d9")
        self.Radiobutton1_13.configure(disabledforeground="#a3a3a3")
        self.Radiobutton1_13.configure(foreground="#000000")
        self.Radiobutton1_13.configure(highlightbackground="#d9d9d9")
        self.Radiobutton1_13.configure(highlightcolor="black")
        self.Radiobutton1_13.configure(justify='left')
        self.Radiobutton1_13.configure(text='''Custom Email''')
        self.Radiobutton1_13.configure(command=self.custom_domain)
        self.Radiobutton1_13.configure(value="12",variable=self.var)

        self.Button1_1 = tk.Button(top)
        self.Button1_1.place(relx=0.049, rely=0.736, height=24, width=103)
        self.Button1_1.configure(activebackground="#ececec")
        self.Button1_1.configure(activeforeground="#000000")
        self.Button1_1.configure(background="#d9d9d9")
        self.Button1_1.configure(disabledforeground="#a3a3a3")
        self.Button1_1.configure(foreground="#000000")
        self.Button1_1.configure(highlightbackground="#d9d9d9")
        self.Button1_1.configure(highlightcolor="black")
        self.Button1_1.configure(pady="0")
        self.Button1_1.configure(text='''Date of Birth''')
        self.Button1_1.configure(command=self.dob)


   
    def process_completed_time(self):
        sys.stdout = old_stdout
        output_stats=("\n Generation is completed at " +time.ctime() +" \n Have a look at your file :) ")
            #time.sleep(150)
        messagebox.showinfo("Completed",output_stats )

    def random_number(self):
        userdefined_count=int(self.Entry1.get())
        strnlngth_count=int(self.Entry2.get())
        

        print(userdefined_count)
        output_format=str(self.var2.get())
        print(output_format)
        
        if output_format=='0':
            messagebox.showinfo("ALERT","Please select outputformat")
        
        else:

            if output_format=='13':
                
                file_txt=strftime(datetime.datetime.now().strftime("%Y-%m-%d_%I~%M~%S~%p"))+".txt"
        
            elif output_format=='14':
                
                file_txt=strftime(datetime.datetime.now().strftime("%Y-%m-%d_%I~%M~%S~%p"))+".csv"
        
            elif output_format=='15':
                
                file_txt=strftime(datetime.datetime.now().strftime("%Y-%m-%d_%I~%M~%S~%p"))+".doc"        
            try:
                
                textfile_creation=open(file_txt,"w")
                output_stats=("Your process is started at "+time.ctime())
                messagebox.showinfo("Progress",output_stats )
                for _ in range(userdefined_count):
                    sys.stdout=textfile_creation
                    print(str(fake.random_number(digits=strnlngth_count,fix_len=True)))
                textfile_creation.close()
                    
            finally:
                
                self.process_completed_time()
                    


    def dob(self):
        userdefined_count=int(self.Entry1.get())
        
        print(userdefined_count)
        output_format=str(self.var2.get())
        print(output_format)
        
        if output_format=='0':
            messagebox.showinfo("ALERT","Please select outputformat")
        
        else:

            if output_format=='13':
                
                file_txt=strftime(datetime.datetime.now().strftime("%Y-%m-%d_%I~%M~%S~%p"))+".txt"
        
            elif output_format=='14':
                
                file_txt=strftime(datetime.datetime.now().strftime("%Y-%m-%d_%I~%M~%S~%p"))+".csv"
        
            elif output_format=='15':
                
                file_txt=strftime(datetime.datetime.now().strftime("%Y-%m-%d_%I~%M~%S~%p"))+".doc"        
            try:
                
                textfile_creation=open(file_txt,"w")
                output_stats=("Your process is started at "+time.ctime())
                messagebox.showinfo("Progress",output_stats )
                for _ in range(userdefined_count):
                    sys.stdout=textfile_creation
                    print(fake.date_of_birth(tzinfo=None, minimum_age=18, maximum_age=60))
                textfile_creation.close()
                    
            finally:
                
                self.process_completed_time()
                
    def phone_number(self):
        userdefined_count=int(self.Entry1.get())
        
        print(userdefined_count)
        output_format=str(self.var2.get())
        print(output_format)
        
        if output_format=='0':
            messagebox.showinfo("ALERT","Please select outputformat")
        
        else:

            if output_format=='13':
                
                file_txt=strftime(datetime.datetime.now().strftime("%Y-%m-%d_%I~%M~%S~%p"))+".txt"
        
            elif output_format=='14':
                
                file_txt=strftime(datetime.datetime.now().strftime("%Y-%m-%d_%I~%M~%S~%p"))+".csv"
        
            elif output_format=='15':
                
                file_txt=strftime(datetime.datetime.now().strftime("%Y-%m-%d_%I~%M~%S~%p"))+".doc"        
            try:
                
                textfile_creation=open(file_txt,"w")
                output_stats=("Your process is started at "+time.ctime())
                messagebox.showinfo("Progress",output_stats )
                for _ in range(userdefined_count):
                    sys.stdout=textfile_creation
                    print("0"+str(fake.random_number(digits=3,fix_len=True))+str(fake.random_number(digits=3,fix_len=True))+str(fake.random_number(digits=4,fix_len=True)))
                textfile_creation.close()
                    
            finally:
                
                self.process_completed_time()

    def company_name(self):
        userdefined_count=int(self.Entry1.get())
        
        print(userdefined_count)
        output_format=str(self.var2.get())
        
        if output_format=='0':
            messagebox.showinfo("ALERT","Please select outputformat")
        
        else:
        
            if output_format=='13':
                    file_txt=strftime(datetime.datetime.now().strftime("%Y-%m-%d_%I~%M~%S~%p"))+".txt"
            
            elif output_format=='14':
                file_txt=strftime(datetime.datetime.now().strftime("%Y-%m-%d_%I~%M~%S~%p"))+".csv"
            
            elif output_format=='15':
                    file_txt=strftime(datetime.datetime.now().strftime("%Y-%m-%d_%I~%M~%S~%p"))+".doc"        
            
            try:
                textfile_creation=open(file_txt,"w")
                output_stats=("Your process is started at "+time.ctime())
                messagebox.showinfo("Progress",output_stats )
                for _ in range(userdefined_count):
                    sys.stdout=textfile_creation
                    print(fake.company())
                textfile_creation.close()
                    
            finally:
                self.process_completed_time()
            
            

    def job_title(self):
        userdefined_count=int(self.Entry1.get())
        
        print(userdefined_count)
        output_format=str(self.var2.get())
        
        if output_format=='0':
            messagebox.showinfo("ALERT","Please select outputformat")
        
        else:
        
            if output_format=='13':
                    file_txt=strftime(datetime.datetime.now().strftime("%Y-%m-%d_%I~%M~%S~%p"))+".txt"
            
            elif output_format=='14':
                file_txt=strftime(datetime.datetime.now().strftime("%Y-%m-%d_%I~%M~%S~%p"))+".csv"
            
            elif output_format=='15':
                    file_txt=strftime(datetime.datetime.now().strftime("%Y-%m-%d_%I~%M~%S~%p"))+".doc" 
            
            try:
                textfile_creation=open(file_txt,"w")
                output_stats=("Your process is started at "+time.ctime())
                messagebox.showinfo("Progress",output_stats )
                for _ in range(userdefined_count):
                    sys.stdout=textfile_creation
                    print(fake.job())
                textfile_creation.close()
                    
            finally:
                self.process_completed_time()
            

        
    
    def custom_domain(self,top=None):
        
        self.Entry3 = tk.Entry(top)
        self.Entry3.place(relx=0.783, rely=0.531,height=20, relwidth=0.029)
        self.Entry3.configure(background="white")
        self.Entry3.configure(disabledforeground="#a3a3a3")
        self.Entry3.configure(font="TkFixedFont")
        self.Entry3.configure(foreground="#000000")
        self.Entry3.configure(highlightbackground="#d9d9d9")
        self.Entry3.configure(highlightcolor="black")
        self.Entry3.configure(insertbackground="black")
        self.Entry3.configure(selectbackground="#c4c4c4")
        self.Entry3.configure(selectforeground="black")

        self.Entry4 = tk.Entry(top)
        self.Entry4.place(relx=0.82, rely=0.531,height=20, relwidth=0.164)
        self.Entry4.configure(background="white")
        self.Entry4.configure(disabledforeground="#a3a3a3")
        self.Entry4.configure(font="TkFixedFont")
        self.Entry4.configure(foreground="#000000")
        self.Entry4.configure(highlightbackground="#d9d9d9")
        self.Entry4.configure(highlightcolor="black")
        self.Entry4.configure(insertbackground="black")
        self.Entry4.configure(selectbackground="#c4c4c4")
        self.Entry4.configure(selectforeground="black")
   
        self.submit()
        
    def submit(self,top=None):
       # txt=".txt"
        #file_txt.append(txt)
        
        userdefined_count=int(self.Entry1.get())
        print(userdefined_count)
        choice_m=str(self.var.get())
        output_format=str(self.var2.get())
        
        FN_checkbox=int(self.var1_1.get())
        MN_checkbox=int(self.var1_2.get())
        LN_checkbox=int(self.var1_3.get())
        
        print(FN_checkbox)
        print(MN_checkbox)
        print(LN_checkbox)
        
        #if output_format!='13' or '14' or '15':
          #  messagebox.showinfo("Alert","Please select OUTPUT FORMAT")
        if userdefined_count=='':
            messagebox.showinfo("ALERT","Please enter no. of data")
            
        if output_format=='0':
            messagebox.showinfo("ALERT","Please select outputformat")

            
        else:
         
            if output_format=='13':
                    file_txt=strftime(datetime.datetime.now().strftime("%Y-%m-%d_%I~%M~%S~%p"))+".txt"
            
            elif output_format=='14':
                file_txt=strftime(datetime.datetime.now().strftime("%Y-%m-%d_%I~%M~%S~%p"))+".csv"
            
            elif output_format=='15':
                    file_txt=strftime(datetime.datetime.now().strftime("%Y-%m-%d_%I~%M~%S~%p"))+".doc" 
            
            if choice_m=='3':
                try:
                    textfile_creation=open(file_txt,"w")
                    output_stats=("Your process is started at "+time.ctime())
                    messagebox.showinfo("Progress",output_stats )
                    uk_building_suffix=['Tower','Building','Hall',' ']
                    for _ in range(userdefined_count):
                        sys.stdout=textfile_creation
                        print(fake.building_number()+","+fake.city()+" "+fake.random_element(uk_building_suffix))
                    textfile_creation.close()
                finally:
                    self.process_completed_time()
            
            if choice_m=='4':
                try:
                    textfile_creation=open(file_txt,"w")
                    output_stats=("Your process is started at "+time.ctime())
                    messagebox.showinfo("Progress",output_stats )
                    uk_street_suffix=[' Street',' ']
                    for _ in range(userdefined_count):
                        sys.stdout=textfile_creation
                        print(fake.street_name()+fake.random_element(uk_street_suffix))
                    textfile_creation.close()
                finally:
                    self.process_completed_time()        
            if choice_m=='5':
                try:
                    textfile_creation=open(file_txt,"w")
                    output_stats=("Your process is started at "+time.ctime())
                    messagebox.showinfo("Progress",output_stats )
                  
                    for _ in range(userdefined_count):
                        sys.stdout=textfile_creation
                        print(fake.state())
                    textfile_creation.close()
                finally:
                    self.process_completed_time()
            if choice_m=='6':
                try:
                    textfile_creation=open(file_txt,"w")
                    output_stats=("Your process is started at "+time.ctime())
                    messagebox.showinfo("Progress",output_stats )
                  
                    for _ in range(userdefined_count):
                        sys.stdout=textfile_creation
                        print(fake.city())
                    textfile_creation.close()
                finally:
                    self.process_completed_time()  
            if choice_m=='7':
                try:
                    textfile_creation=open(file_txt,"w")
                    output_stats=("Your process is started at "+time.ctime())
                    messagebox.showinfo("Progress",output_stats )
                    
                    for _ in range(userdefined_count):
                        sys.stdout=textfile_creation
                        print(fake.random_uppercase_letter()+fake.random_uppercase_letter()+str (fake.random_number(digits=3,fix_len=True))+' '+str (fake.random_number(digits=1,fix_len=True))+fake.random_uppercase_letter()+fake.random_uppercase_letter())
                    textfile_creation.close()
                finally:
                    self.process_completed_time()  
            if choice_m=='8':
                try:
                    textfile_creation=open(file_txt,"w")
                    output_stats=("Your process is started at "+time.ctime())
                    messagebox.showinfo("Progress",output_stats )
                    postalcode_list=['SY3','G41','G51','G31','G21','B44','SW1A','EC2M','N1','EC1A','EC4Y','EH12','EC2N','B70','B33','AB10','WC1A','B23','B65','B34','SW15','AB41','E8','AB21','E20','B71','B20','B68','B32','N14','N6','B42','AB56','AB25','E7','AB43','B46','B31','B69','B43','B62','B94','B66','B35','B79','W2','AB45','AB38','AB55','PO4 9BY','NE9 6HX','EX34 8LH','SM4 5RF','SE4 2BH','GL51 3ND','PR1 8JB','TW11 9BQ','GL7 2DG','TS15 9XE','PO21 3AE','SM1 4PL','GL53 9EQ','L21 2PA','GU28 0DS','WS14 0QH','YO31 1HZ','NN14 6EP','SY6 6DU','TN7 4AE','SW1A 1AA','SY3 7FA','BN1 2NW','CF24 3DG','BA1 2FJ','W1T 1JY','EH10 4BF','B3 2EW','SW1A 1BA','WIS 2HX','SWIA OAA','SW1E 5DU','SE1 2AA']
                    uk_building_suffix=['Tower','Building','Hall',' ']
                    for _ in range(userdefined_count):
                        sys.stdout=textfile_creation
                        print(fake.building_number()+","+fake.city()+" "+fake.random_element(uk_building_suffix)+","+fake.street_name()+" Street"+", London"+", "+fake.random_element(postalcode_list))
                    textfile_creation.close()
                finally:
                    self.process_completed_time()  
            if choice_m=='9':
                try:
                    textfile_creation=open(file_txt,"w")
                    output_stats=("Your process is started at "+time.ctime())
                    messagebox.showinfo("Progress",output_stats )
                    
                    for _ in range(userdefined_count):
                        sys.stdout=textfile_creation
                        print(fake.company_email())
                    textfile_creation.close()
                finally:
                    self.process_completed_time()  
            if choice_m=='10':
                try:
                    textfile_creation=open(file_txt,"w")
                    output_stats=("Your process is started at "+time.ctime())
                    messagebox.showinfo("Progress",output_stats )
                   
                    for _ in range(userdefined_count):
                        sys.stdout=textfile_creation
                        print(fake.free_email())
                    textfile_creation.close()
                finally:
                    self.process_completed_time()  
            if choice_m=='11':
                try:
                    textfile_creation=open(file_txt,"w")
                    output_stats=("Your process is started at "+time.ctime())
                    messagebox.showinfo("Progress",output_stats )
    
                    for _ in range(userdefined_count):
                        sys.stdout=textfile_creation
                        print('@'+fake.domain_name())
                    textfile_creation.close()
                finally:
                    self.process_completed_time()  
            if choice_m=='12':
                              
                random_len=int(self.Entry3.get())
                custom_domain=self.Entry4.get()
                
                try:
                    textfile_creation=open(file_txt,"w")
                    output_stats=("Your process is started at "+time.ctime())
                    messagebox.showinfo("Progress",output_stats )
        
                    for _ in range(userdefined_count):
                        sys.stdout=textfile_creation
                        print(fake.first_name()+fake.last_name()+str(fake.random_number(digits=random_len,fix_len=True))+custom_domain)
                    textfile_creation.close()
                finally:
                    self.process_completed_time()                    
                
            if FN_checkbox==1:
                
                firstname_txt=file_txt +'Firstname' ".txt"

                middlename_txt=file_txt +'MiddleName' ".txt"

                lastname_txt=file_txt +'Lastname' ".txt"

                fullname_txt=file_txt+ 'Fullname'  ".txt"

     
                try:
                    firstname_textfile_creation=open(firstname_txt,"w")
                    output_stats=("\n Your process is started at "+time.ctime())
                    messagebox.showinfo("Progress",output_stats )
                    for _ in range(userdefined_count):
                        sys.stdout=firstname_textfile_creation
                        a= names.get_first_name()
                        gen=(gender_detector.get_gender(a))
                        print('Mr.'+" "+a if (gen=='male' or gen=='mostly_male') else 'Miss.'+" "+a)
                    firstname_textfile_creation.close()
                finally:
                    self.process_completed_time()
                            

if __name__ == '__main__':
    vp_start_gui()





